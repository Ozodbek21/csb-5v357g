{"version":3,"sources":["hooks/useAgoraRtm.ts","App.tsx","helpers/randomId.ts","serviceWorker.ts","index.tsx"],"names":["USER_ID","Math","floor","random","useAgoraRtm","userName","client","useState","messages","setMessages","channel","useRef","createChannel","current","color","randomColor","luminosity","initRtm","a","login","uid","toString","join","setLocalUserAttributes","name","useEffect","on","data","handleMessageReceived","getUserAttributes","user","console","log","messageType","newMessageData","message","text","setCurrentMessage","currentMessage","sendChannelMessage","sendMessage","then","catch","error","AgoraRTM","createInstance","randomUseName","length","result","characters","charactersLength","i","charAt","makeid","App","textArea","setTextArea","className","map","index","key","style","placeholder","onChange","e","target","value","aria-label","onKeyPress","charCode","preventDefault","trim","currentTarget","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed7b7808.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState, useRef } from \"react\";\n\nimport { IMessage } from \"../models/IMessage\";\nimport randomColor from \"randomcolor\";\nimport { RtmClient, RtmMessage } from \"../types/AgoraRTMTypes\";\n\nconst USER_ID = Math.floor(Math.random() * 1000000001);\n\nconst useAgoraRtm = (userName: string, client: RtmClient) => {\n  const [messages, setMessages] = useState<IMessage[]>([]);\n  const channel = useRef(client.createChannel(\"channelId\")).current;\n  const color = useRef(randomColor({ luminosity: \"dark\" })).current;\n  const initRtm = async () => {\n    await client.login({\n      uid: USER_ID.toString(),\n    });\n    await channel.join();\n    await client.setLocalUserAttributes({\n      name: userName,\n      color,\n    });\n  };\n  useEffect(() => {\n    initRtm();\n    // eslint-disable-next-line consistent-return\n  }, []);\n\n  useEffect(() => {\n    channel.on(\"ChannelMessage\", (data, uid) => {\n      handleMessageReceived(data, uid);\n    });\n  }, []);\n  const handleMessageReceived = async (data: RtmMessage, uid: string) => {\n    const user = await client.getUserAttributes(uid);\n    console.log(data);\n    if (data.messageType === \"TEXT\") {\n      const newMessageData = { user, message: data.text };\n      setCurrentMessage(newMessageData);\n    }\n  };\n\n  const [currentMessage, setCurrentMessage] = useState<IMessage>();\n  const sendChannelMessage = async (text: string) => {\n    channel\n      .sendMessage({ text })\n      .then(() => {\n        setCurrentMessage({\n          user: { name: \"Current User (Me)\", color },\n          message: text,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    if (currentMessage) setMessages([...messages, currentMessage]);\n  }, [currentMessage]);\n\n  return { sendChannelMessage, messages };\n};\nexport default useAgoraRtm;\n","import React, { useState } from \"react\";\n\nimport \"./App.css\";\nimport useAgoraRtm from \"./hooks/useAgoraRtm\";\nimport AgoraRTM from \"agora-rtm-sdk\";\nimport { RtmClient } from \"./types/AgoraRTMTypes\";\nimport { makeid } from \"./helpers/randomId\";\n\nconst client = AgoraRTM.createInstance(\"4f2102e306e244e88ed165dc12a4bfa7\");\nconst randomUseName = makeid(5);\nfunction App() {\n  const [textArea, setTextArea] = useState(\"\");\n  const { messages, sendChannelMessage } = useAgoraRtm(\n    randomUseName,\n    client as RtmClient\n  );\n  const submitMessage = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.charCode === 13) {\n      e.preventDefault();\n      if (textArea.trim().length === 0) return;\n      sendChannelMessage(e.currentTarget.value);\n      setTextArea(\"\");\n    }\n  };\n  return (\n    <div className=\"App\">\n      <div className=\"d-flex flex-column py-5 px-3\">\n        {messages.map((data, index) => {\n          return (\n            <div className=\"row\" key={`chat${index + 1}`}>\n              <h5 className=\"font-size-15\" style={{ color: data.user.color }}>\n                {`${data.user.name} :`}\n              </h5>\n              <p className=\"text-break\">{` ${data.message}`}</p>\n            </div>\n          );\n        })}\n      </div>\n      <div>\n        <textarea\n          placeholder=\"Type your message here\"\n          className=\"form-control\"\n          onChange={(e) => setTextArea(e.target.value)}\n          aria-label=\"With textarea\"\n          value={textArea}\n          onKeyPress={submitMessage}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export function makeid(length: number) {\n  var result = \"\";\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}